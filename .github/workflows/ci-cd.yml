name: Backend & Frontend CI/CD (optimized, detect nginx root)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux, X64]   # 明确锁定到你的 EC2 自建 Runner
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    env:
      NODE_VERSION: '22'
      PROCESS_NAME: 'lcms-backend'
      BACKEND_ENTRY: 'backend/server.js'
      CRA_CI_FLAG: ''  # CRA 构建不要把 warning 当失败

    steps:
      - name: Checkout (fetch 2 commits for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Debug workspace
        run: |
          echo "== pwd ==" && pwd
          echo "== root ==" && ls -la || true
          echo "== backend ==" && ls -la backend || true
          echo "== frontend ==" && ls -la frontend || true

      - name: Verify secrets presence (masked)
        run: |
          for k in MONGO_URI JWT_SECRET PORT; do
            v="${{ secrets.MONGO_URI }}"; :; done
          echo "MONGO_URI set? $([ -n "${{ secrets.MONGO_URI }}" ] && echo true || echo false)"
          echo "JWT_SECRET set? $([ -n "${{ secrets.JWT_SECRET }}" ] && echo true || echo false)"
          echo "PORT set? $([ -n "${{ secrets.PORT }}" ] && echo true || echo false)"

      - name: Ensure pm2 available
        run: |
          npm i -g pm2 || true
          pm2 -v || true

      # ---------- Robust change detection ----------
      - name: Resolve base ref for diff (handles first push)
        id: base
        run: |
          set -e
          BEFORE="${{ github.event.before }}"
          if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              echo "ref=$(git rev-parse HEAD^)" >> "$GITHUB_OUTPUT"
            else
              echo "ref=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "ref=$BEFORE" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect backend changes
        id: diff_be
        run: |
          set -e
          BASE="${{ steps.base.outputs.ref }}"
          if git diff --name-only "$BASE" HEAD | grep -q '^backend/'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect frontend presence & changes
        id: diff_fe
        run: |
          set -e
          if [ -d frontend ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
            BASE="${{ steps.base.outputs.ref }}"
            if git diff --name-only "$BASE" HEAD | grep -q '^frontend/'; then
              echo "changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "changed=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Cache (optional) ----------
      - name: Cache ~/.npm (tarballs)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('backend/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      # ====================== Backend ======================
      - name: Ensure Backend Dependencies (install if missing OR changed)
        working-directory: ./backend
        run: |
          NEED_INSTALL=0
          [ ! -d node_modules ] && NEED_INSTALL=1
          if [ "${{ steps.diff_be.outputs.changed }}" = "true" ]; then NEED_INSTALL=1; fi
          if [ $NEED_INSTALL -eq 1 ]; then
            if [ -f package-lock.json ]; then
              npm ci --prefer-offline --no-audit --no-fund
            else
              npm install --prefer-offline --no-audit --no-fund
            fi
          else
            echo "backend deps up-to-date; skip install"
          fi

      - name: Ensure backend .env (always refresh)
        working-directory: ./backend
        run: |
          cat > .env <<EOF
          MONGO_URI=${{ secrets.MONGO_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=${{ secrets.PORT }}
          EOF

      - name: Run Backend Tests (if present)
        working-directory: ./backend
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
        run: |
          if [ -f package.json ] && jq -er '.scripts.test // empty' package.json >/dev/null 2>&1; then
            npm test
          elif ls test/*.js 2>/dev/null || ls **/*.test.js **/*.spec.js 2>/dev/null; then
            npm test
          else
            echo "No backend tests found, skipping."
          fi

      - name: Restart/Start backend with PM2 (update env)
        run: |
          pm2 restart "${{ env.PROCESS_NAME }}" --update-env || pm2 start "${{ env.BACKEND_ENTRY }}" --name "${{ env.PROCESS_NAME }}"
          pm2 save || true

      # ====================== Frontend ======================
      - name: Ensure Frontend Dependencies (install if missing OR changed)
        if: steps.diff_fe.outputs.present == 'true'
        working-directory: ./frontend
        run: |
          NEED_INSTALL=0
          [ ! -d node_modules ] && NEED_INSTALL=1
          if [ "${{ steps.diff_fe.outputs.changed }}" = "true" ]; then NEED_INSTALL=1; fi
          if [ $NEED_INSTALL -eq 1 ]; then
            if [ -f package-lock.json ]; then
              npm ci --prefer-offline --no-audit --no-fund
            else
              npm install --prefer-offline --no-audit --no-fund
            fi
          else
            echo "frontend deps up-to-date; skip install"
          fi

      - name: Build Frontend (CRA tolerant)
        if: steps.diff_fe.outputs.present == 'true'
        working-directory: ./frontend
        env:
          CI: ${{ env.CRA_CI_FLAG }}
        run: |
          if npm run | grep -q " build"; then
            rm -rf build dist || true
            npm run build
          else
            echo "No build script defined for frontend. Skipping build."
          fi

      # ---------- Detect nginx web root ----------
      - name: Detect Nginx web root
        id: nginx_root
        run: |
          set -e
          ROOT="$(sudo nginx -T 2>/dev/null | grep -i ' root ' | grep -v '#' | head -n1 | awk '{print $2}' | sed 's/;//')"
          if [ -z "$ROOT" ]; then
            if [ -d /usr/share/nginx/html ]; then ROOT="/usr/share/nginx/html"; else ROOT="/var/www/html"; fi
          fi
          echo "NGINX_ROOT=$ROOT" >> "$GITHUB_ENV"
          echo "Detected nginx root: $ROOT"

      - name: Deploy Frontend to Nginx root (on change OR first publish)
        if: steps.diff_fe.outputs.present == 'true'
        run: |
          echo "Target: $NGINX_ROOT"
          sudo mkdir -p "$NGINX_ROOT"
          if [ "${{ steps.diff_fe.outputs.changed }}" = "true" ] || [ ! -f "$NGINX_ROOT/index.html" ]; then
            sudo rm -rf "$NGINX_ROOT"/*
            sudo cp -r frontend/build/* "$NGINX_ROOT"/
            sudo nginx -t && sudo systemctl reload nginx || true
            echo "Frontend deployed."
          else
            echo "No FE change and target already has index.html; skipping copy."
          fi
