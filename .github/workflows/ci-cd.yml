name: Backend & Frontend CI/CD (optimized, detect nginx root)

on:
  push:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    timeout-minutes: 45

    env:
      NODE_VERSION: '22'
      PROCESS_NAME: 'lcms-backend'
      BACKEND_ENTRY: 'backend/server.js'
      CRA_CI_FLAG: ''

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Debug workspace
        run: |
          echo "== pwd ==" && pwd
          echo "== root ==" && ls -la || true
          echo "== backend ==" && ls -la backend || true
          echo "== frontend ==" && ls -la frontend || true

      - name: Verify secrets presence (masked)
        run: |
          if [ -n "${{ secrets.MONGO_URI }}" ]; then echo "MONGO_URI set? true"; else echo "MONGO_URI set? false"; fi
          if [ -n "${{ secrets.JWT_SECRET }}" ]; then echo "JWT_SECRET set? true"; else echo "JWT_SECRET set? false"; fi
          if [ -n "${{ secrets.PORT }}" ]; then echo "PORT set? true"; else echo "PORT set? false"; fi

      - name: Ensure pm2 available
        run: |
          npm i -g pm2 || true
          pm2 -v || true

      # ---------- Change detection ----------
      - name: Detect backend changes
        id: diff_be
        run: |
          if git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" | grep '^backend/' >/dev/null 2>&1; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect frontend presence & changes
        id: diff_fe
        run: |
          if [ -d frontend ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
            if git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" | grep '^frontend/' >/dev/null 2>&1; then
              echo "changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "changed=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Global npm cache ----------
      - name: Cache ~/.npm (tarballs)
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('backend/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # ====================== Backend ======================
      - name: Cache backend/node_modules
        if: steps.diff_be.outputs.changed == 'true'
        id: be_mod_cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-be-mod-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-be-mod-

      - name: Install Backend Dependencies (skip if cache hit)
        if: steps.diff_be.outputs.changed == 'true' && steps.be_mod_cache.outputs.cache-hit == 'true'
        run: echo "backend node_modules cache hit, skipping install."

      - name: Install Backend Dependencies
        if: steps.diff_be.outputs.changed == 'true' && steps.be_mod_cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit --no-fund
          else
            npm install --prefer-offline --no-audit --no-fund
          fi

      - name: Create backend .env
        if: steps.diff_be.outputs.changed == 'true'
        working-directory: ./backend
        run: |
          rm -f .env
          {
            echo "MONGO_URI=${{ secrets.MONGO_URI }}"
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            echo "PORT=${{ secrets.PORT }}"
          } >> .env

      - name: Run Backend Tests (skip if none)
        if: steps.diff_be.outputs.changed == 'true'
        working-directory: ./backend
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
        run: |
          if [ -f package.json ] && grep -q "\"test\"" package.json; then
            npm test
          elif ls test/*.js 2>/dev/null || ls **/*.test.js **/*.spec.js 2>/dev/null; then
            npm test
          else
            echo "No backend tests found, skipping."
          fi

      - name: Restart/Start backend with PM2
        run: |
          pm2 restart "${{ env.PROCESS_NAME }}" || pm2 start "${{ env.BACKEND_ENTRY }}" --name "${{ env.PROCESS_NAME }}"
          pm2 save || true

      # ====================== Frontend ======================
      - name: Cache frontend/node_modules
        if: steps.diff_fe.outputs.present == 'true' && steps.diff_fe.outputs.changed == 'true'
        id: fe_mod_cache
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-fe-mod-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-fe-mod-

      - name: Install Frontend Dependencies (skip if cache hit)
        if: steps.diff_fe.outputs.present == 'true' && steps.diff_fe.outputs.changed == 'true' && steps.fe_mod_cache.outputs.cache-hit == 'true'
        run: echo "frontend node_modules cache hit, skipping install."

      - name: Install Frontend Dependencies
        if: steps.diff_fe.outputs.present == 'true' && steps.diff_fe.outputs.changed == 'true' && steps.fe_mod_cache.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit --no-fund
          else
            npm install --prefer-offline --no-audit --no-fund
          fi

      - name: "Build Frontend (CRA: do not fail on warnings)"
        if: steps.diff_fe.outputs.present == 'true' && steps.diff_fe.outputs.changed == 'true'
        working-directory: ./frontend
        env:
          CI: ${{ env.CRA_CI_FLAG }}
        run: |
          rm -rf build dist || true
          if npm run | grep -q " build"; then
            npm run build
          else
            echo "No build script defined for frontend. Skipping build."
          fi

      # ---------- Detect nginx web root ----------
      - name: Detect Nginx web root
        id: nginx_root
        run: |
          set -e
          ROOT="$(sudo nginx -T 2>/dev/null | grep -i ' root ' | grep -v '#' | head -n1 | awk '{print $2}' | sed 's/;//')"
          if [ -z "$ROOT" ]; then
            if [ -d /usr/share/nginx/html ]; then
              ROOT="/usr/share/nginx/html"
            else
              ROOT="/var/www/html"
            fi
          fi
          echo "NGINX_ROOT=$ROOT" >> "$GITHUB_ENV"
          echo "Detected nginx root: $ROOT"

      - name: Deploy Frontend to Nginx root
        if: steps.diff_fe.outputs.present == 'true' && steps.diff_fe.outputs.changed == 'true'
        run: |
          echo "Target: $NGINX_ROOT"
          sudo mkdir -p "$NGINX_ROOT"
          sudo rm -rf "$NGINX_ROOT"/*
          sudo cp -r frontend/build/* "$NGINX_ROOT"/
          sudo nginx -t && sudo systemctl reload nginx || true
